// Generated by CoffeeScript 2.3.0
var Bucket, cush, evalFile, fs, getOptions, path, sha256, slush;

({evalFile, sha256} = require('cush/utils'));

Bucket = require('./Bucket');

slush = require('slush');

cush = require('cush');

path = require('path');

fs = require('saxon/sync');

module.exports = function(opts) {
  var app, bucketDir, buckets, log, projects;
  ({log, bucketDir} = opts);
  buckets = Object.create(null);
  projects = Object.create(null);
  app = slush(opts);
  app.ready(function() {
    return log(log.coal('[cush-cdn]'), log.lgreen('Server ready!'));
  });
  if (opts.sock) {
    app.on('close', function() {
      try {
        return fs.remove(opts.sock);
      } catch (error1) {}
    });
  }
  app.pipe(require('./api')(app));
  app.loadProject = function(root) {
    var bucket, bundles, pack, project, skip;
    if (projects[root]) {
      return;
    }
    projects[root] = project = cush.project(root);
    pack = project.root;
    skip = evalFile(pack.resolve('assets/.cushignore'));
    skip = skip && skip.split('\n') || [];
    skip.push('/.cushignore', '.DS_Store', '*.swp');
    bucket = this.loadBucket(pack.data.name, {
      root: pack.resolve('assets'),
      skip: skip
    });
    ({bundles} = project.config);
    return Object.keys(bundles).forEach(function(main) {
      var bundle;
      opts = getOptions(bundles[main]);
      bundle = cush.bundle(path.join(root, main), {
        target: opts.target,
        dev: true
      });
      log(log.lyellow('Loading bundle:'), bucket.id + '/' + main);
      log(' ', opts);
      return bucket.put(opts.name, async function(res) {
        var error, result;
        result = (await bundle.read());
        if (!bundle.missed.length) {
          res.send(result);
          return;
        }
        error = {
          code: 'BAD_IMPORTS',
          root: bundle.root.path,
          imports: bundle.missed.map(function([mod, i]) {
            var line, ref;
            ({ref, line} = mod.deps[i]);
            return {
              ref,
              line,
              parent: bundle.relative(mod)
            };
          })
        };
        res.status(400);
        res.send(error);
        app.emit('error', error);
      });
    });
  };
  app.dropProject = function(root) {
    var project;
    if (project = projects[root]) {
      delete projects[root];
      project.drop();
    }
    return !!project;
  };
  app.getBucket = function(bucketId) {
    return buckets[bucketId] || null;
  };
  app.loadBucket = function(bucketId, opts) {
    var bucket;
    if (!opts || typeof opts.root !== 'string') {
      throw Error('`opts.root` must be a string');
    }
    if (bucket = buckets[bucketId]) {
      if (bucket.root === opts.root) {
        return bucket;
      }
      throw Error(`Bucket name '${bucketId}' is taken by:\n  ${bucket.root}`);
    }
    log(log.lyellow('Loading bucket:'), bucketId);
    log(' ', opts);
    opts.dest = path.join(bucketDir, bucketId);
    buckets[bucketId] = bucket = new Bucket(bucketId, opts);
    return bucket;
  };
  app.dropBucket = function(bucketId) {
    var bucket;
    if (bucket = buckets[bucketId]) {
      fs.remove(bucket.dest, true);
      return delete buckets[bucketId];
    } else {
      return false;
    }
  };
  return app;
};

getOptions = function(value) {
  var name, target;
  if (typeof value === 'string') {
    name = value;
    target = /\.([^.\/]+)\.[^.\/]+$/.exec(value);
    if (!(target && (target = target[1]))) {
      throw Error(`Missing target: '${value}'`);
    }
    return {name, target};
  }
  if (!value.target) {
    throw Error(`Missing \`target\` option: ${JSON.stringify(value)}`);
  }
  return value;
};
