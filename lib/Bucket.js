// Generated by CoffeeScript 2.3.0
var Bucket, emptyArray, fs, noop, path, saveJson, se, sha256, sortObject, wch;

({sha256} = require('cush/utils'));

sortObject = require('sort-obj');

path = require('path');

wch = require('wch');

fs = require('saxon/sync');

se = require('socket-events');

emptyArray = [];

noop = function() {};

// Buckets are local caches for project assets.
Bucket = class Bucket {
  constructor(id, opts) {
    this.id = id;
    this.root = opts.root;
    this.dest = opts.dest;
    this.only = opts.only || emptyArray;
    this.skip = opts.skip || emptyArray;
    this.events = se.events();
    this._assets = this._loadAssets();
    this;
  }

  has(name) {
    return this._assets[name] != null;
  }

  get(name) {
    var value;
    if (value = this._assets[name]) {
      if (value === true) {
        value = name;
      }
      return this._dest(value);
    }
  }

  patch(values) {
    var event, name, prev, value;
    for (name in values) {
      value = values[name];
      if (value === null) {
        this.delete(name);
        continue;
      }
      prev = this._assets[name];
      this._assets[name] = value;
      if (prev) {
        if (prev === true) {
          prev = name;
        }
        prev = this._dest(prev);
        if (value === true) {
          value = name;
        }
        fs.rename(prev, this._dest(value));
      }
      event = prev && 'change' || 'add';
      this.events.emit(event, {name, value});
    }
    this._save();
  }

  put(name, value) {
    var dest, event, ext, file, prev;
    prev = this._assets[name];
    if (prev === true) {
      prev = name;
      value || (value = true);
    }
    if (typeof value !== 'function') {
      file = fs.read(path.join(this.root, name), null);
      if (value === true) {
        value = name;
      } else {
        ext = path.extname(name);
        value = name.slice(0, 1 - ext.length) + sha256(file, 10) + ext;
        if (value === prev) {
          return;
        }
      }
      dest = this._dest(value);
      if (!prev) {
        fs.mkdir(path.dirname(dest));
      }
      fs.write(dest, file);
    }
    if (prev) {
      fs.remove(this._dest(prev));
    }
    this._assets[name] = value;
    this._save();
    event = prev && 'change' || 'add';
    this.events.emit(event, {name, value});
  }

  delete(name) {
    var dest;
    if (dest = this._assets[name]) {
      if (dest === true) {
        dest = name;
      }
      dest = this._dest(dest);
      // Remove the file, and its directory (if empty)
      fs.remove(dest);
      try {
        fs.remove(path.dirname(dest));
      } catch (error) {}
      delete this._assets[name];
      this._save();
      this.events.emit('delete', {name});
    }
  }

  query(opts = {}) {
    opts.only || (opts.only = this.only);
    opts.skip = opts.skip && this.skip.concat(opts.skip) || this.skip;
    return wch.query(this.root, opts);
  }

  _save() {
    return saveJson(this._dest('assets.json'), this._assets);
  }

  _dest(name) {
    return path.join(this.dest, name);
  }

  _resolve(...args) {
    var name;
    name = path.relative(this.root, path.join(...args));
    if (name[0] !== '.') {
      return name;
    } else {
      return null;
    }
  }

  _loadAssets() {
    var assets, manifest, query;
    fs.mkdir(this.dest);
    manifest = this._dest('assets.json');
    if (fs.isFile(manifest)) {
      assets = JSON.parse(fs.read(manifest));
      query = this.query({
        since: fs.stat(manifest).mtime
      });
    } else {
      assets = {};
      assets['assets.json'] = true;
      query = this.query();
    }
    this._save = noop;
    query.then((files) => {
      var root;
      ({root} = files);
      files.forEach((file) => {
        var name;
        name = this._resolve(root, file.name);
        if (file.exists) {
          return this.put(name);
        } else {
          return this.delete(name);
        }
      });
      // Save even if no changes were made.
      delete this._save;
      this._save();
      return this.watcher = wch.stream(root, {only: this.only, skip: this.skip}).on('data', (file) => {
        var name;
        if (name = this._resolve(file.path)) {
          if (file.exists) {
            return this.put(name);
          } else {
            return this.delete(name);
          }
        }
      });
    }).catch((err) => {
      return this.events.emit('error', err);
    });
    return assets;
  }

};

module.exports = Bucket;

saveJson = function(file, json) {
  return fs.write(file, JSON.stringify(sortObject(json), null, 2));
};
